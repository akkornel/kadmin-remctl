#!/usr/bin/perl -w
our $ID = q$Id$;
#
# kadmin-backend -- remctl interface to kadmin functionality.
#
# Written by Russ Allbery <rra@stanford.edu>
# Based heavily on work by Roland Schemers
# Copyright 2003, 2007 Board of Trustees, Leland Stanford Jr. University
#
# Permission to use, copy, modify, and distribute this software and its
# documentation for any purpose and without fee is hereby granted, provided
# that the above copyright notice appear in all copies and that both that
# copyright notice and this permission notice appear in supporting
# documentation, and that the name of Stanford University not be used in
# advertising or publicity pertaining to distribution of the software without
# specific, written prior permission.  Stanford University makes no
# representations about the suitability of this software for any purpose.  It
# is provided "as is" without express or implied warranty.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

##############################################################################
# Modules and declarations
##############################################################################

use strict;

use Expect ();

# K4 OPTIONS
our $K4_KADMIN = '/usr/local/sbin/kadmin';
our $K4_PRINC  = 'service.lsdb';
our $K4_SRVTAB = '/etc/leland/srvtab.lsdb';
our $K4_ADMIN  = 'admin';
our $K4_KEY    = '/db/srvtab/keys/admin';

# K5 OPTIONS
our $K5_KADMIN = "/usr/local/sbin/k5admin";
our $K5_PRINC  = "service/lsdb";
our $K5_KEYTAB = "/etc/leland/keytab.lsdb";

# Account used to test password strength.
our $STRENGTH  = 'service/password-strength';

# Path to kasetkey, used to create Kerberos v4 principals in an AFS kaserver.
our $KASETKEY  = '/usr/local/bin/gen_srvtab';

##############################################################################
# Utility functions
##############################################################################

# Check a principal and make sure it's one that we're allowed to use.  The
# requirements are that the principal have a NULL instance, that it fit the
# form of a regular SUNet ID, and that it not be the special principal
# "admin".
sub check_principal {
    my ($principal) = @_;
    if ($principal !~ /^[a-z][0-9][a-z]{2,7}\z/ || $principal eq 'admin') {
        die "error: invalid principal: $principal\n";
    }
}

# Check if we can use a password.  We have to do a bit of sanity checking even
# though we're talking to Expect.
sub check_password {
    my ($password) = @_;
    if ($password =~ /[\x00-\x08\x0a-\x1f]/) {
        die "error: invalid control characters in password\n";
    }
}

# Spawn a conversation with k5admin and return an Expect object.
sub spawn_k5admin {
    my @args = ('-p', $K5_PRINC, '-k', '-t', $K5_KEYTAB);
    my $k5admin = Expect->spawn ($K5_KADMIN, @args);
    unless ($k5admin) {
        die "error: cannot run $K5_KADMIN\n";
    }
    return $k5admin;
}

# Run a k5admin command and capture the output.  Return a list consisting of
# the exit status and the output, or in a scalar context, just the exit
# status.
sub run_k5admin {
    my ($command) = @_;
    my @args = ('-p', $K5_PRINC, '-k', '-t', $K5_KEYTAB, '-q', $command);
    open (K5ADMIN, '-|', $K5_KADMIN, @args)
        or die "error: cannot run $K5_KADMIN\n";
    my @output = <K5KADMIN>;
    close K5KADMIN;
    my $status = ($? >> 8);
    return wantarray ? ($status, join ('', @output)) : $status;
}

##############################################################################
# Password strength checking
##############################################################################

# The K5 kadmin interface doesn't support checking the strength of a password
# without trying to change a password.  We therefore test the strength of a
# password by changing the password of a designated special account (which is
# also set DISABLE_ALL_TIX) with the same password policy as our user accounts
# and seeing if the password is accepted.
#
# On success, do nothing.  On failure, die with the error message from K5
# kadmin.
sub validate_password {
    my ($password) = @_;
    check_password ($password);
    my $k5admin = spawn_k5admin;
    unless ($k5admin->expect (2, 'kadmin:')) {
        die "error: cannot talk to $K5_KADMIN\n";
    }
    $k5admin->send ("change_password $STRENGTH\n");
    unless ($k5admin->expect (2, 'password for principal')) {
        die "error: cannot talk to $K5_KADMIN\n";
    }
    $k5admin->send ("$password\n");
    unless ($k5admin->expect (2, 'password for principal')) {
        die "error: cannot talk to $K5_KADMIN\n";
    }
    $k5admin->send ("$password\n");
    my ($num, $error, $match, $before, $after)
        = $k5admin->expect (2, 'change_password: ', 'kadmin: ');
    if ($num == 1) {
        $after =~ s/ while changing.*//;
        print "retstr: $after\n";
        $k5admin->soft_close;
    } else {
        $k5admin->send ("quit\n");
        $k5admin->soft_close;
    }
}

##############################################################################
# Account creation
##############################################################################

# Create a principal.  First, create a K4 account with a random password and
# set its status.  Then, create the account in K5, which will reset the
# password in K4.  The account creation will also queue a password change for
# AD.  Active Directory account creation is handled separately.  $status is
# either enabled or disabled and controls the initial account status.
sub create_principal {
    my ($principal, $password, $status);
    check_principal ($principal);
    check_password ($password);
    my $exist = run_k5admin ("getprinc $principal");
    if ($exist) {
        die "error: account $principal already exists\n";
    }
    my $code = system ($KASETKEY, '-k', $K4_KEY, '-a', $K4_ADMIN, '-r',
                       '-s', $principal);
    if ($code != 0) {
        die "error: cannot create K4 principal for $principal\n";
    }
    if ($status ne 'enabled') {
        my $code = system ($K4_KADMIN, '-p', $K4_PRINC, '-s', $K4_SRVTAB,
                           'disable', $principal);
        if ($code != 0) {
            die "error: cannot disable K4 principal for $principal\n";
        }
    }
    my $command = 'add_principal -policy standard +requires_preauth';
    if ($status ne 'enabled') {
        $command .= ' -allow_tix';
    }
    my $k5admin = spawn_k5admin;
    unless ($k5admin->expect (2, 'kadmin:')) {
        die "error: cannot talk to $K5_KADMIN\n";
    }
    $k5admin->send ("$command\n");
    unless ($k5admin->expect (2, 'password for principal')) {
        die "error: cannot talk to $k5_KADMIN\n";
    }
    $k5admin->send ("$password\n");
    unless ($k5admin->expect (2, 'password for principal')) {
        die "error: cannot talk to $k5_KADMIN\n";
    }
    $k5admin->send ("$password\n");
    my ($num, $error, $match, $before, $after)
        = $k5admin->expect (2, 'add_principal: ', 'kadmin: ');
    if ($num == 1) {
        print "retstr: $after\n";
        $k5admin->soft_close;
    } else {
        $k5admin->send ("quit\n");
        $k5admin->soft_close;
    }
}

##############################################################################
# Main routine
##############################################################################

my $cmd = shift;

if ($cmd eq 'change_passwd') {

    my $princ = shift || die "error: missing principal\n";
    my $oldpass = shift || die "error: missing old-passwd\n";
    my $pass  = shift || die "error: missing new-passwd\n";

    exec ($K4_KADMIN, $cmd, $princ, $oldpass, $pass)
	or die "error: can't exec $K4_KADMIN\n";

} elsif ($cmd eq 'check_passwd') {

    # The principal is accepted for compatibilty with older versions but
    # completely ignored.
    my $princ = shift;
    my $pass  = shift or die "error: missing password\n";

    validate_password ($pass);

} elsif ($cmd eq 'reset_passwd') {

    my $princ = shift || die "error: missing principal\n";
    my $pass  = shift || die "error: missing password\n";

    check_principal ($princ);
    exec ($K4_KADMIN, '-p', $K4_PRINC, '-s', $K4_SRVTAB, $cmd, 
	  $princ, $pass) or die "error: can't exec $K4_KADMIN\n";

} elsif ($cmd eq 'create') {

    my $princ  = shift or die "error: missing principal\n";
    my $pass   = shift or die "error: missing password\n";
    my $status = shift or die "error: missing enabled/disabled\n";
    if ($status ne 'enabled' && $status ne 'disabled') {
        die "error: invalid status: $status\n";
    }

    create_principal ($princ, $pass, $status);

} elsif ($cmd eq 'delete' || $cmd eq 'disable' || $cmd eq 'enable') {

    my $princ = shift || die "error: missing principal\n";

    check_principal ($princ);
    exec ($K4_KADMIN, '-p', $K4_PRINC, '-s', $K4_SRVTAB, $cmd, $princ) or 
	die "error: can't exec $K4_KADMIN\n";

} elsif ($cmd eq 'examine') {
    my $princ = shift || die "error: missing principal\n";

    if ($princ =~ /\'/) {
	die "error: invalid character in principal name\n";
    }

    system($K4_KADMIN, '-p', $K4_PRINC, '-s', $K4_SRVTAB, 'examine', $princ);
    print "----------------------------------------\n";
    if ($princ =~ /\./) {
	$princ =~ s/\./\//g;
    }

    open(K5STATUS, 
	 "$K5_KADMIN -p $K5_PRINC -q 'getprinc $princ' -k -t $K5_KEYTAB |")
	|| die "error: can't run k5 admin\n";

    my $output = '';
    while (<K5STATUS>) {
	# no need to return this line
	next if /Authenticating as principal/; 
	$output .= $_;
    }
    close K5STATUS || die "error: can't run k5 admin\n";
    print $output;

} elsif ( $cmd eq 'help') {
    print <<'EOF';
  kadmin change_passwd {principal} {old-passwd} {new-passwd}
  kadmin check_passwd  {principal} {passwd}
  kadmin create        {principal} {passwd} enabled|disabled
  kadmin delete        {principal}
  kadmin disable       {principal}
  kadmin enable        {principal}
  kadmin examine       {principal}
  kadmin reset_passwd  {principal} {passwd}
EOF

} else {
    die "error: unknown cmd: $cmd\n";
}

exit 0;
